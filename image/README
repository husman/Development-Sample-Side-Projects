Creator:		Haleeq Usman
Date:			6/17/2012
License:		Completely Free. Use, extend, or distribute as you wish.
E-mail:			husman@neetos.com
Example Usage:		http://neetos.com/examples/php/image
Example Usage Code:	index.php (directory relative to this file)

Purpose of this branch:
	creation of a universal php image handler. A generic adaptor is
	created for use for image manipulation through: GD Library,
	ImageMagick, and Custom JPEG handler (Simple decoder only).

Design Patterns Utilized:
			Adapter, Template, and Factory.

Design Pattern Details:
	Why Adaptor?	To provide access from a single interface/API and complete
			abstraction of the individual libraries/APIs.
	
	Why Template?	Means of customizing the specific alogirthms within the Adaptor.
	
	Why Factory?	Universal configuration/constants object. This provides a wrapper
			around each individual library's configuration/necessary
			constants. Therefore, we can manage the configuration of our
			universal adaptor from a single object as opposed to implementing
			each individual configuration within the specific adaptors and
			later editing each adaptor's configuration when a change is
			required. This provides us a means to keep our specific
			configurations within a single object.

Why Multiple Handlers:
	Some times you need to work with simple image manipulation, and
	other times, more advanced image techqinues. If the task is simple
	then the GD library built into php would be enough. However If more
	advanced image handling techniques are required and ImageMagick is
	installed on the machine, then ImageMagick may be used.
	
	If the environment does not support GD but supports Imagemagick, then
	no further implementation would be required, just switch the adaptor.
	
	If you prefer to use GD for simple image manipulation and ImageMagick
	for more advanced image manipulation, then this adaptor provides you
	the means to switch between them quickly and effortlessly as you wish.

Why I Implemented a very simple JPEG Decoder:
	For demostration purposes. To demostrate how to add your own
	codec[s] within	the adaptor. Therefore, providing additional
	image handlers to the class!
	
Did I perform any optimizations?
	It is much to early to profile the class and optimize for
	performance. Normalization of the codes and proper phpdocs have
	not been fully implemented yet too. However, The proper comments
	will be implemented and phpdocumentor2 will be used to create
	a documentation of this API.
			
	xDebug PECL extension was used to profile this script for some 
	"test" optimizations. Take for example the comparative operator:
	== vs ===. === was determined to be on the order of 2 processing
	cycles faster than ==. Therefore, when we know our comparison will
	produce a constant, I use the === operator to compare the object
	references (I assume this is how its implement on the back-end
	through C with the PHP source codes). However, it is much too 
	soon to profile the script for performance optimizations! 
	More coming soon!
	
	

	
