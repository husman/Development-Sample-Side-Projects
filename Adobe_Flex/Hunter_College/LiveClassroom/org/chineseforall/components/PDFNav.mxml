<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="org.chineseforall.components.*">
	<s:layout>
		<s:VerticalLayout gap="6"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import flash.display.Bitmap;
			import flash.display.BitmapData;
			import flash.display.DisplayObject;
			import flash.display.MovieClip;
			import flash.display.Shape;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.KeyboardEvent;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			import flash.geom.Rectangle;
			import flash.media.Camera;
			import flash.ui.Keyboard;
			
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			
			import org.chineseforall.core.App;
			
			import spark.components.Application;
			import spark.components.HScrollBar;
			import spark.components.TextInput;
			import spark.components.VScrollBar;
			
			private var app:App = null;
			private var swfLoader:SWFLoader = null;
			private var url:String = null;
			private var rectView:Rectangle = null;
			private var PDFBodyMask:MovieClip = null;
			private var delta_y:uint = 0;
			private var original_body_width:uint = 0;
			private var original_body_height:uint = 0;
			private var vSBar:VScrollBar = null;
			private var vSBarValue:uint = 0;
			private var hSBar:HScrollBar = null;
			private var hSBarValue:uint = 0;
			private var dragMode:Boolean = false;
			private var pdfNav:PDFNav = null;
			private var pdfSwfMc:MovieClip = null;
			
			public var canvas:UIComponent = null;
			
			public function initializeAndLoad(app_handle:App, pdf_url:String):void
			{
				app = app_handle;
				url = pdf_url;
				
				// Setup the canvas
				canvas = new UIComponent();
				canvas.width = app.instance.body.width;
				canvas.height = app.instance.body.height;
				canvas.x = 5;
				canvas.y = 3;
				app.instance.canvas.addChild(canvas);
				
				swfLoader = new SWFLoader();
				swfLoader.addEventListener(Event.COMPLETE, handlePDFLoaded);
				swfLoader.load(url);
				
			}
			
			private function reAdjustUI():void
			{
				pdfSwfMc.viewport.x = (canvas.width - pdfSwfMc.viewport.width)/2;
				pdfSwfMc.y = 41;
				
				//PDFBodyMask = new MovieClip();
				PDFBodyMask.y = 41;
				canvas.addChild(PDFBodyMask);
				PDFBodyMask.graphics.lineStyle();
				PDFBodyMask.graphics.beginFill(0xFFFFFF,1);
				PDFBodyMask.graphics.drawRect(0, 0, canvas.width - 29, canvas.height - 50);
				PDFBodyMask.graphics.endFill();
				pdfSwfMc.mask = PDFBodyMask;
				
				canvas.addChild(pdfSwfMc);
				
				//vSBar = new VScrollBar();
				vSBar.minimum = 0;
				vSBar.maximum = pdfSwfMc.viewport.height - canvas.height - 50 + 100;
				vSBar.y = 41;
				vSBar.x = canvas.width - 28;
				canvas.addChild(vSBar);
				vSBar.height = canvas.height - 50;
				
				//hSBar = new HScrollBar();
				hSBar.minimum = 0;
				hSBar.maximum = pdfSwfMc.viewport.width - canvas.width - 28 + 100;
				hSBar.y = canvas.height - 24;
				canvas.addChild(hSBar);
				hSBar.width = canvas.width - 28;
				canvas.setFocus();
			}
			
			private function handlePDFLoaded(e:Event):void{
				pdfSwfMc = swfLoader.content as MovieClip;
				
				txt_curPage.text = "1";
				lbl_numPages.text = pdfSwfMc.viewport.totalFrames.toString();
				
				pdfSwfMc.viewport.x = (canvas.width - pdfSwfMc.viewport.width)/2;
				pdfSwfMc.y = 41;
				
				PDFBodyMask = new MovieClip();
				PDFBodyMask.y = 41;
				canvas.addChild(PDFBodyMask);
				PDFBodyMask.graphics.lineStyle();
				PDFBodyMask.graphics.beginFill(0xFFFFFF,1);
				PDFBodyMask.graphics.drawRect(0, 0, canvas.width - 29, canvas.height - 50);
				PDFBodyMask.graphics.endFill();
				pdfSwfMc.mask = PDFBodyMask;
				
				canvas.addChild(pdfSwfMc);
				
				vSBar = new VScrollBar();
				vSBar.minimum = 0;
				vSBar.maximum = pdfSwfMc.viewport.height - canvas.height - 50 + 100;
				vSBar.y = 41;
				vSBar.x = canvas.width - 28;
				canvas.addChild(vSBar);
				vSBar.height = canvas.height - 50;
				
				hSBar = new HScrollBar();
				hSBar.minimum = 0;
				hSBar.maximum = pdfSwfMc.viewport.width - canvas.width - 28 + 100;
				hSBar.y = canvas.height - 24;
				canvas.addChild(hSBar);
				hSBar.width = canvas.width - 28;
				
				btn_nextPage.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
					PDFNextPage(true);
				});
				btn_prevPage.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
					PDFPrevPage(true);
				});
				btn_zoomIn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
					PDFZoomIn(true);
				});
				btn_zoomOut.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
					PDFZoomOut(true);
				});
				txt_curPage.addEventListener(KeyboardEvent.KEY_UP, function(e:KeyboardEvent):void {
					if(e.keyCode == Keyboard.ENTER)
						var value:uint = parseInt(txt_curPage.text);
						PDFChangePage(value, true);
				});
				
				hSBar.addEventListener(Event.CHANGE, handlePDFBodyHScrollBar);
				vSBar.addEventListener(Event.CHANGE, handlePDFBodyVScrollBar);
				canvas.addEventListener(MouseEvent.MOUSE_WHEEL, handlePDFVScroll);
				
				// Click down/drag events
				pdfSwfMc.viewport.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
				pdfSwfMc.viewport.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
				pdfSwfMc.viewport.addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
				pdfSwfMc.viewport.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);
				canvas.setFocus();
				
			}
			
			private function handleMouseOut(e:MouseEvent):void
			{
				// Correct pdf position just in case
				handleMouseMove(e);
				pdfSwfMc.viewport.stopDrag();
				dragMode = false;
			}
			
			private function handleMouseMove(e:MouseEvent):void
			{
				var change:Number = 0;
				if(hSBar.maximum > 0) {
					if(dragMode && pdfSwfMc.viewport.x >= canvas.x) {
						pdfSwfMc.viewport.x = canvas.x;
					} else if(pdfSwfMc.viewport.x <= (canvas.width - pdfSwfMc.viewport.width - 40)) {
						pdfSwfMc.viewport.x = (canvas.width - pdfSwfMc.viewport.width - 40);
					}
					// Let's re-adjust the vertical scrollbar
					hSBar.value = Math.abs(pdfSwfMc.viewport.x - canvas.x);
					hSBarValue = hSBar.value;
				} else {
					if(dragMode)
						pdfSwfMc.viewport.x = (canvas.width - pdfSwfMc.viewport.width)/2;
				}
				if(dragMode && vSBar.maximum > 0) {
					if(pdfSwfMc.viewport.y <= (canvas.height - pdfSwfMc.height - 50)) {
						pdfSwfMc.viewport.y = (canvas.height - pdfSwfMc.height - 50);
					} else if(pdfSwfMc.viewport.y >= (canvas.y - 2)) {
						pdfSwfMc.viewport.y = (canvas.y - 2);
					}
					// Let's re-adjust the vertical scrollbar
					vSBar.value = Math.abs(pdfSwfMc.viewport.y);
					vSBarValue = vSBar.value;
				} else {
					if(dragMode)
						pdfSwfMc.viewport.y = canvas.y - 2;
				}
			}
			
			private function handleMouseDown(e:MouseEvent):void
			{
				pdfSwfMc.viewport.startDrag();
				dragMode = true;
			}
			
			private function handleMouseUp(e:MouseEvent):void
			{
				pdfSwfMc.viewport.stopDrag();
				dragMode = false;
			}
			
			private function handlePDFBodyHScrollBar(e:Event):void
			{
				var scrollbar:HScrollBar = e.currentTarget as HScrollBar;
				if(scrollbar.value < hSBarValue) {
					pdfSwfMc.viewport.x += hSBarValue - scrollbar.value;
				}
				else {
					pdfSwfMc.viewport.x -= scrollbar.value - hSBarValue;
				}
				hSBarValue = scrollbar.value;
			}
			
			private function handlePDFBodyVScrollBar(e:Event):void
			{
				var scrollbar:VScrollBar = e.currentTarget as VScrollBar;
				if(scrollbar.value < vSBarValue)
					pdfSwfMc.viewport.y += vSBarValue - scrollbar.value;
				else
					pdfSwfMc.viewport.y -= scrollbar.value - vSBarValue;
				vSBarValue = scrollbar.value;
			}
			
			private function handlePDFVScroll(e:MouseEvent):void
			{	
				var change:int = 0;
				if (e.delta > 0) {
					change = canvas.height - 50 + pdfSwfMc.viewport.y;
					if(change < (canvas.height - 50)) {
						if( canvas.height - 50 - change < 10) {
							vSBar.value -= canvas.height - 50 - change;
							pdfSwfMc.viewport.y += canvas.height - 50 - change;
						} else {
							vSBar.value -= 25;
							pdfSwfMc.viewport.y += 25;
						}
					}
				} else {
					change = canvas.height - 50 - pdfSwfMc.viewport.y;
					if(change < pdfSwfMc.viewport.height) {
						if(pdfSwfMc.height  - change < 10) {
							vSBar.value += pdfSwfMc.viewport.height - change;
							pdfSwfMc.viewport.y -= pdfSwfMc.viewport.height - change;
						} else {
							vSBar.value += 25;
							pdfSwfMc.viewport.y -= 25;
						}
					}
				}
			}
			
			private function PDFNextPage(sendUpdateToAll:Boolean = false):void
			{
				if(sendUpdateToAll && shared_mode.selected)
					app.net.msgServer("PDF_syncExecuteCmd", {name: name, cmd: "nextPage"});
				if(pdfSwfMc.viewport.currentFrame < pdfSwfMc.viewport.totalFrames) {
					pdfSwfMc.viewport.nextFrame();
					reAdjustUI();
					pdfSwfMc.viewport.y = 0;
					vSBar.value = 0;
					vSBarValue = 0;
					txt_curPage.text = pdfSwfMc.viewport.currentFrame.toString();
				}
			}
			private function PDFPrevPage(sendUpdateToAll:Boolean = false):void
			{
				if(sendUpdateToAll && shared_mode.selected)
					app.net.msgServer("PDF_syncExecuteCmd", {name: name, cmd: "prevPage"});
				if(pdfSwfMc.viewport.currentFrame > 0) {
					pdfSwfMc.viewport.prevFrame();
					reAdjustUI();
					pdfSwfMc.viewport.y = 0;
					vSBar.value = 0;
					vSBarValue = 0;
					txt_curPage.text = pdfSwfMc.viewport.currentFrame.toString();
				}
			}
			
			private function PDFChangePage(value:uint, sendUpdateToAll:Boolean = false):void
			{
				if(value > 0 && value <= pdfSwfMc.viewport.totalFrames) {
					if(sendUpdateToAll)
						app.net.msgServer("PDF_syncExecuteCmd", {name: name, cmd: "changePage", page: value});
					pdfSwfMc.viewport.gotoAndStop(value);
					reAdjustUI();
					pdfSwfMc.viewport.y = 0;
					vSBar.value = 0;
					vSBarValue = 0;
					txt_curPage.text = value.toString();
				}
			}
			
			private function PDFZoomIn(sendUpdateToAll:Boolean = false):void
			{
				if(sendUpdateToAll && shared_mode.selected)
					app.net.msgServer("PDF_syncExecuteCmd", {name: name, cmd: "zoomIn"});
				pdfSwfMc.viewport.scaleX += 0.12;
				pdfSwfMc.viewport.scaleY += 0.12;
				vSBar.maximum = pdfSwfMc.viewport.height - canvas.height + 50;
				pdfSwfMc.viewport.x = (canvas.width - pdfSwfMc.viewport.width)/2;
				if(pdfSwfMc.viewport.x < canvas.x) {
					hSBar.maximum = pdfSwfMc.viewport.width - canvas.width + 40;
					hSBar.value = Math.abs(pdfSwfMc.viewport.x - canvas.x);
					if(hSBar.value > 0) {
						hSBarValue = hSBar.value;
					}
				}
			}
			
			private function PDFZoomOut(sendUpdateToAll:Boolean = false):void
			{
				if(sendUpdateToAll && shared_mode.selected)
					app.net.msgServer("PDF_syncExecuteCmd", {name: name, cmd: "zoomOut"});
				pdfSwfMc.viewport.scaleX -= 0.12;
				pdfSwfMc.viewport.scaleY -= 0.12;
				vSBar.maximum = pdfSwfMc.viewport.height - canvas.height + 50;
				pdfSwfMc.viewport.x = (canvas.width - pdfSwfMc.viewport.width)/2;
				hSBar.maximum = pdfSwfMc.viewport.width - canvas.width + 40;
				hSBar.value = Math.abs(pdfSwfMc.viewport.x - canvas.x);
				if(hSBar.value > 0) {
					hSBarValue = hSBar.value;
				} else {
					hSBarValue = 0;
				}
			}
			
			public function executeCmd(cmd_obj:Object):void
			{
				var e:MouseEvent = null;
				switch(cmd_obj.cmd) {
					case "nextPage":
						PDFNextPage();
						break;
					case "prevPage":
						PDFPrevPage();
						break;
					case "changePage":
						PDFChangePage(parseInt(cmd_obj.page));
						break;
					case "zoomIn":
						PDFZoomIn();
						break;
					case "zoomOut":
						PDFZoomOut();
						break;
				}
			}
		
			public function cleanUp():void
			{
				app.instance.canvas.removeChild(canvas);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%" height="36" backgroundColor="#E9E9E9"
					   borderColor="#696969" cornerRadius="3" dropShadowVisible="true">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		<s:HGroup width="100%" gap="8" horizontalAlign="center" verticalAlign="middle">
			<s:Image id="btn_prevPage" source="assets/images/buttons/prevPage.png"/>
			<s:Image id="btn_nextPage" source="assets/images/buttons/nextPage.png"/>
			<s:TextInput id="txt_curPage" width="38" height="21" color="#333333" fontWeight="normal"
						 paddingBottom="0" paddingTop="3" text="0" textAlign="center"/>
			<s:Label color="#696969" fontSize="14" fontWeight="normal" paddingTop="4" text="/"/>
			<s:Label id="lbl_numPages" color="#333333" fontSize="14" fontWeight="normal" paddingTop="4"
					 text="0"/>
			<s:Label color="#9F9E9E" fontFamily="Times New Roman" fontSize="24" fontWeight="normal" paddingTop="0"
					 text="|"/>
			<s:Image id="btn_zoomOut" source="assets/images/buttons/zoomOut.png"/>
			<s:Image id="btn_zoomIn" source="assets/images/buttons/zoomIn.png"/>
			<mx:CheckBox id="shared_mode" label="Shared Mode" chromeColor="#FFFFFF" selected="true" />
		</s:HGroup>
	</s:BorderContainer>
</s:SkinnableContainer>